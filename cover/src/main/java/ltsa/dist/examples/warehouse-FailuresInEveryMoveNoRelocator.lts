//Constants 
//directions
const North	= 0
const East	= 1
const South	= 2
const West	= 3
range Dir = North..West
const Dirs = 4

//Map
const Rows  = 2 
const Cols  = 2 
const Cells = Rows*Cols
range Loc = 0..Cells-1

//Loading
const U = 0
const L = 1
range LoadUnload = U..L


//Alphabets
set Actions = {left,right,around,follow}
set ActionCommands = {try.{Actions},{Actions}.retry}
set ControllableActions = {ActionCommands,in.unload,out.load}
set FailActions = {Actions.{lost,lostRetry}}
set UncontrollableActions = {FailActions,
							Actions.{suc,sucRetry},in.load}
set Alphabet = {ControllableActions,UncontrollableActions}

//Intray.
IN = (in.load -> in.unload -> IN).
OUT = (out.load -> OUT).
MAP	= MAP[0][0][South],
MAP[x:0..Cols][y:0..Rows][facing:Dir] = 
	( try.right -> MAP[x][y][(facing + 1) % Dirs]
	| try.left -> MAP[x][y][(facing + (Dirs - 1)) % Dirs]
	| try.around -> MAP[x][y][(facing + 2) % Dirs]
	| when (x > 0 && facing == East) 
					try.follow -> MAP[x - 1][y][facing]
	| when (x < (Cols - 1) && facing == West) 
					try.follow -> MAP[x + 1][y][facing]
	| when (y > 0 && facing == North) 
					try.follow -> MAP[x][y - 1][facing]
	| when (y < (Rows - 1) && facing == South) 
					try.follow -> MAP[x][y + 1][facing]
	| when (x == 0 && y == 0) 
					in.unload -> MAP[x][y][facing]
	| when ((x == (Rows - 1)) && (y == (Cols - 1))) 
					out.load -> MAP[x][y][facing]).
ROBOT = MOVE[U],
MOVE[load:LoadUnload]= 
		(when (load == U) in.unload -> MOVE[L]
		|when (load == L) out.load -> MOVE[U]
		|try[action:Actions]->TRY[load][action]),
TRY[load:LoadUnload][action:Actions] = 
			([action].lost->RETRY[load][action]
			|[action].suc->MOVE[load]),
RETRY[load:LoadUnload][action:Actions] = ([action].retry->
				([action].lostRetry->RETRY[load][action]
				|[action].sucRetry->MOVE[load])).

//Composed Environment Model
||Scenario = ( MAP || ROBOT || IN || OUT).

//Fluent definitions
fluent INTRAY_FULL = <in.load, in.unload> 
fluent ADDED_TO_OUTTRAY = <out.load, Alphabet\{out.load}> 
fluent F_FAILURES = <FailActions,Alphabet\{FailActions}>

//Problem Assertions
assert IntrayFull = INTRAY_FULL
assert UnloadOut = ADDED_TO_OUTTRAY
assert Failures = F_FAILURES

//Goal Specifications
controllerSpec Goal = {
	failure = {Failures}	
	assumption = {IntrayFull}
	liveness = {UnloadOut}
	controllable = {ControllableActions}
}

//Controller Definitions
controller ||C = (Scenario)~{Goal}.

//TESTS
||TEST_R = ROBOT.
||TEST_M = MAP.
||TEST_MP = (MAP||ROBOT).
||TEST_C = C.
