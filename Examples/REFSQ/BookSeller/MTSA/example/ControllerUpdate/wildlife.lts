const LOWBAT = 2
const MAXBAT = 6
const MAXPOS = 2
range R = 0..MAXPOS
const MAXHEIGHT = 2
range HEIGHT = 0..MAXHEIGHT

set UpdatingControllableActions = {start, goto[R], return2base, high,mid,low, scan, picture, follow, oldSpecDropped, newSpecEnsured}
set ControllableActions = {start, goto[R], return2base, high,mid,low, scan, picture, follow, badWeatherDetected}
set A = {UpdatingControllableActions, scan.val[0..1], lowBattery, base, urban, wild, beginUpdate, checkbat, okBattery}

//Updating Controller properties
ltl_property UPD_OLD = (S_OLD W oldSpecDropped)
ltl_property UPD_NEW = [](newSpecEnsured -> []S_NEW)
ltl_property IMPLY_PROPERTY = [](newSpecEnsured -> FlyingLow)
ltl_property DONT_DROP_TWICE = [](oldSpecDropped -> X(!oldSpecDropped))

assert S_OLD = (ALWAYS_FLY_HIGH && ONLY_SCAN_WHILE_WILD && DONT_SCAN_TWICE && PICTURE_ONLY_IF_DETECTED &&
				NO_PICTURE_BEFORE_SCAN && DONT_PICTURE_TWICE && NOMOVEWHILEGROUNDED && DOSOMETHING && DONTMOVEWITHNOBATTERY)
assert S_NEW = (ALWAYS_FLY_LOW && ONLY_SCAN_WHILE_WILD && DONT_SCAN_TWICE && FOLLOWING_ACTIONS  &&
				NO_FOLLOW_BEFORE_SCAN && FOLLOW_ONLY_IF_DETECTED && DONT_FOLLOW_TWICE && NOMOVEWHILEGROUNDED && DOSOMETHING && DONTMOVEWITHNOBATTERY)

//Updating controller fluents
fluent InTransition = <oldSpecDropped, newSpecEnsured>
fluent NewSpecEnsured = <newSpecEnsured,beginUpdate>
assert A_NewSpecEnsured = NewSpecEnsured
fluent OldSpecDropped = <oldSpecDropped, beginUpdate>
assert A_OldSpecDropped = OldSpecDropped
fluent BeginUpdate = <beginUpdate, start.old> // HACK! start.old is guaranteed to not happen
assert A_BeginUpdate = BeginUpdate


	//Old Environment
	MISSION   = (start -> UAV),
	UAV	  = ({picture,high,mid,low} -> UAV | goto[i:R] -> GOTO | return2base -> MISSION
					| scan -> scan.val[0..1] -> UAV),
	GOTO  = ({base,wild,urban} -> UAV).
	

	BATTERY_COUNTER = (checkbat -> lowBattery -> BATTERY_COUNTER | checkbat -> okBattery -> BATTERY_COUNTER).

	//New Environment
	NEW_MISSION   = (start -> UAV),
	UAV	  = ({follow,picture,high,mid,low} -> UAV | goto[i:R] -> GOTO | return2base -> NEW_MISSION
					| scan -> scan.val[0..1] -> UAV),
	GOTO  = ({base,wild,urban} -> UAV).


    NEW_BATTERY_COUNTER(N=MAXBAT) = BAT[N],
    BAT[i:0..N]= (when (i==LOWBAT) lowBattery -> BAT[i-1] |
    			  when (i!=LOWBAT) {high,mid,low, follow, scan, goto[R], picture} -> BAT[i-1] |
                  return2base -> BAT[N]
                  ).

||OldEnvironment = (MISSION || BATTERY_COUNTER).
||NewEnvironment = (NEW_MISSION || BATTERY_COUNTER).


//OldController
controller ||OldController = OldEnvironment~{OldSpec}.
||EnvironmentAndController = (OldEnvironment || OldController).


assert DOSOMETHING = (return2base -> (NoBattery || (forall[i:R] BEEN[i])))
assert DONTMOVEWITHNOBATTERY = (goto[R] -> !NoBattery)
assert ALWAYS_FLY_HIGH = (!FlyingLow && !FlyingMid)
assert ONLY_SCAN_WHILE_WILD = ((scan -> OnWild) && (OnWild -> ((!goto[R] && !return2base) W scan)) )
assert DONT_SCAN_TWICE = (scan -> (X(!scan) W !OnWild))
assert NO_PICTURE_BEFORE_SCAN = (!WildlifeDetected -> !picture)
assert PICTURE_ONLY_IF_DETECTED = (  (scan.val[1] -> ((!goto[R] && !return2base) W picture))     )
assert DONT_PICTURE_TWICE = (picture -> (X(!picture) W goto[R]))
assert NOMOVEWHILEGROUNDED = ((goto[R] || picture || scan) -> !NotFlying)
ltl_property P_DONTMOVEWITHNOBATTERY = []DONTMOVEWITHNOBATTERY
ltl_property P_DOSOMETHING = []DOSOMETHING
ltl_property P_NOMOVEWHILEGROUNDED = []NOMOVEWHILEGROUNDED
ltl_property P_ALWAYS_FLY_HIGH = []ALWAYS_FLY_HIGH
ltl_property P_ONLY_SCAN_WHILE_WILD = []ONLY_SCAN_WHILE_WILD
ltl_property P_DONT_SCAN_TWICE = []DONT_SCAN_TWICE
ltl_property P_NO_PICTURE_BEFORE_SCAN = []NO_PICTURE_BEFORE_SCAN
ltl_property P_PICTURE_ONLY_IF_DETECTED = []PICTURE_ONLY_IF_DETECTED
ltl_property P_DONT_PICTURE_TWICE = []DONT_PICTURE_TWICE

controllerSpec OldSpec = {
	safety = {P_ALWAYS_FLY_HIGH, P_ONLY_SCAN_WHILE_WILD, P_DONT_SCAN_TWICE, P_PICTURE_ONLY_IF_DETECTED,
				P_NO_PICTURE_BEFORE_SCAN,P_DONT_PICTURE_TWICE, P_NOMOVEWHILEGROUNDED, P_DOSOMETHING, P_DONTMOVEWITHNOBATTERY }
	nonblocking
	controllable = {ControllableActions}
}

//NewController
controller ||NewController = NewEnvironment~{NewSpec}.
||NewControllerAndNewEnvironment = (NewEnvironment || NewController).

assert ALWAYS_FLY_LOW = (!FlyingHigh && !FlyingMid)
assert NO_FOLLOW_BEFORE_SCAN = (!WildlifeDetected -> !follow)
assert FOLLOW_ONLY_IF_DETECTED = (   (scan.val[1] -> ((!goto[R] && !return2base) W follow)) )
assert FOLLOWING_ACTIONS = ((picture -> Following) && (Following -> (!goto[R]  W return2base) ))
assert DONT_FOLLOW_TWICE = (follow -> (X(!follow W return2base)))

ltl_property P_ALWAYS_FLY_LOW = []ALWAYS_FLY_LOW
ltl_property P_NO_FOLLOW_BEFORE_SCAN = []NO_FOLLOW_BEFORE_SCAN
ltl_property P_FOLLOW_ONLY_IF_DETECTED = []FOLLOW_ONLY_IF_DETECTED
ltl_property P_FOLLOWING_ACTIONS = []FOLLOWING_ACTIONS
ltl_property P_DONT_FOLLOW_TWICE = []DONT_FOLLOW_TWICE

controllerSpec NewSpec = {
	safety = {P_ALWAYS_FLY_LOW, P_ONLY_SCAN_WHILE_WILD, P_DONT_SCAN_TWICE, P_FOLLOWING_ACTIONS, P_NOMOVEWHILEGROUNDED,
				P_NO_FOLLOW_BEFORE_SCAN, P_FOLLOW_ONLY_IF_DETECTED, P_DONT_FOLLOW_TWICE, P_DOSOMETHING, P_DONTMOVEWITHNOBATTERY}
	nonblocking
	controllable = {ControllableActions}
}

controllerSpec UpdateSpec = { 
    safety = {UPD_OLD, UPD_NEW, DONT_DROP_TWICE}
    assumption = {A_BeginUpdate}
    liveness = {A_OldSpecDropped, A_NewSpecEnsured}
    nonblocking
    controllable = {UpdatingControllableActions}
}

set GOTOS = {goto[R], return2base}
//fluents
fluent Following = <follow,return2base>
fluent NotFlying = <return2base,{low,mid,high}> initially 1
fluent Flying = <{low,mid,high},return2base>
fluent FlyingHigh = <high,{mid,low}>
fluent FlyingMid = <mid,{high,low}>
fluent FlyingLow = <low,{mid,high}>
fluent WildlifeDetected = <{scan.val[1]},GOTOS>
fluent NoBattery = <lowBattery,start>
fluent MissionStarted = <start,return2base>
fluent ScanPending = <scan,scan.val[0..1]>
fluent OnWild = <wild, GOTOS> 
fluent OnUrban = <urban, GOTOS>
fluent OnBase = <base,GOTOS>
fluent At0 = <goto[0],GOTOS\{goto[0]}>
fluent At1 = <goto[1],GOTOS\{goto[1]}>
fluent At2 = <goto[2],GOTOS\{goto[2]}>
fluent At3 = <goto[3],GOTOS\{goto[3]}>
fluent At4 = <goto[4],GOTOS\{goto[4]}>
fluent At5 = <goto[5],GOTOS\{goto[5]}>
fluent At6 = <goto[6],GOTOS\{goto[6]}>
fluent At7 = <goto[7],GOTOS\{goto[7]}>
fluent At8 = <goto[8],GOTOS\{goto[8]}>
fluent BEEN[i:R] = <goto[i],start>
fluent Been0 = <goto[0],start>
fluent Been1 = <goto[1],start>
fluent Been2 = <goto[2],start>
fluent CheckPending=<checkbat,{okBattery,lowBattery}>
fluent GotoPending=<GOTOS,{base,wild,urban}>

//fluent Detected = <scan.val[0..1], ControllableActions> 
//fluent ReturningToBase = <return2base, ControllableActions\{return2base}>
//fluent PictureTaken = <picture, ControllableActions\{picture}> 

updatingController UpdCont = { 
    oldController = EnvironmentAndController,
    oldEnvironment = OldEnvironment,
    newEnvironment = NewEnvironment,
    newGoal = UpdateSpec,
    updateFluents = {
		{FlyingHigh,FlyingHigh},
		{FlyingMid,FlyingMid},
		{FlyingLow,FlyingLow},
		{Flying,Flying},
		{Following,Following},
		{WildlifeDetected,WildlifeDetected},
		{NoBattery,NoBattery},
		{MissionStarted,MissionStarted},
		{ScanPending,ScanPending},
		{CheckPending,CheckPending},
		{GotoPending,GotoPending}
//		{Detected,Detected},
//		{ReturningToBase, ReturningToBase},
//		{PictureTaken,PictureTaken},
//		{At0, At0},
//		{At1, At1},
//		{At2, At2},
//		{At3, At3},
//		{At4, At4},
//		{At5, At5},
//		{At6, At6},
//		{At7, At7},
//		{At8, At8},
//		{Been0,Been0},
//		{Been1,Been1},
//		{Been2,Been2},
//		{OnBase,OnBase},
//		{OnUrban,OnUrban},
//		{OnWild,OnWild}
	}
}

assert TEST_FORMULA1 = (S_OLD W oldSpecDropped)
assert TEST_FORMULA2 = [](newSpecEnsured -> []S_NEW)
assert TEST_FORMULA3 = [](oldSpecDropped -> X (!oldSpecDropped))
assert TEST_FINAL_FORMULA = ((S_OLD W oldSpecDropped) && [](newSpecEnsured -> []S_NEW) && [](oldSpecDropped -> X(!oldSpecDropped)))

