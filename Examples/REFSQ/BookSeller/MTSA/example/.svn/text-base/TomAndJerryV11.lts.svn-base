
set CatFlaps = {c1,c2,c3,c4,c5,c6,c7a,c7b}
set MouseFlaps = {m1,m2,m3,m4,m5,m6}
set Controllable = {CatFlaps} //MouseFlaps

CAT(Init=2) = (start->cat_in[Init]->CAT[Init]),
CAT[0] = (c1 -> ECAT[1] | c4 -> ECAT[3]),
CAT[1] = (c2 -> ECAT[2] | c7b -> ECAT[3]),
CAT[2] = (c3 -> ECAT[0] ),
CAT[3] = (c5 -> ECAT[4] | c7a -> ECAT[1]),
CAT[4] = (c6 -> ECAT[0] ),
ECAT[room:0..4] = (cat_in[room]->CAT[room]).

MOUSE(Init=4) = (start->mouse_in[Init]->MOUSE[Init]),
MOUSE[0] = (m1 -> EMOUSE[2] | m4 -> EMOUSE[4]),
MOUSE[1] = (m3 -> EMOUSE[0] ),
MOUSE[2] = (m2 -> EMOUSE[1] ),
MOUSE[3] = (m6 -> EMOUSE[0] ),
MOUSE[4] = (m5 -> EMOUSE[3] ),
EMOUSE[room:0..4] = (mouse_in[room]->MOUSE[room]).

fluent CATROOM[room:0..4] = <cat_in[room],{cat_in[0..4]}\{cat_in[room]}>
fluent MOUSEROOM[room:0..4] = <mouse_in[room],{mouse_in[0..4]}\{mouse_in[room]}>

/*
assert MOUSE_IN_2 = MOUSEROOM[2]
assert MOUSE_IN_4 = MOUSEROOM[4]
assert CAT_IN_2 = CATROOM[2]
assert CAT_IN_4 = CATROOM[4]
*/

assert HUNT = (exists[i:0..4] (CATROOM[i] && MOUSEROOM[i]))

controllerSpec G1 = {
//safety = {SAFE}
liveness = {HUNT} //CAT_IN_2, CAT_IN_4}//MOUSE_IN_2, MOUSE_IN_4,
controllable = {Controllable}
}

||Models = (CAT || MOUSE).
controller	||C = (Models)~{G1}.
||RUNLiveAndSafe = C.

animation MAZElAs = "xml/catmousemaze.xml" target RUNLiveAndSafe  
                 actions {
                    forall[i:CatFlaps] {[i]/[i]},
					forall[i:MouseFlaps] {[i]/[i]}
                 }
                 controls {
                    cat_in[0..4]/end,
                    mouse_in[0..4]/mend,
                    start/start
                 }


