// ---------------------------------------------------
// CONTAINS THE INITIAL BOOK SELLER DESIGN
// ---------------------------------------------------

set Actions = {cRequestQuote, sProvideQuote, cGetBookAvail, cLeft, cOrder, sRetBookAvail, sProvidePrice, sPlaceOrder, cBookOrdered, sBookAvailable, sBookReady, 
				sSubmitReceipt, sCourierStart, sWaitBook, sBookDelivered, cMoneyOrder, cSendMoney, sReceivedMoney, sHasCCNNumber, sChargeCreditCard, sHasCCAAuth,
				sChargeCreditCard, sHasCCAAuth, sReceiptPrinted, sReceiptDelivered, sSendElecRecept, sSendPrintReceipt, cBookOrdered, orderClosed, end, sBookNotAvailable
			}

// initial book seller desing
D1=		QUOTEMANAGER,
        QUOTEMANAGER=(  		cRequestQuote?      ->  QUOTEMANAGER        		|
                        		sProvideQuote?      ->  QUOTEMANAGER        		|
                       			cGetBookAvail?       ->  AVAILABILITYMANAGER        |
                        		cLeft   			->  ENDSTATE 					|
                        		cOrder?     			->  PAYMENTMANAGER      		),

		AVAILABILITYMANAGER=(	sRetBookAvail 		-> QUOTEMANAGER 				|
								sProvidePrice?		-> AVAILABILITYMANAGER 			|
								sPlaceOrder?	  	-> AVAILABILITYMANAGER 			|
								cBookOrdered?   	-> AVAILABILITYMANAGER 			|
								sBookNotAvailable?	-> AVAILABILITYMANAGER			|
								sBookAvailable?  	-> AVAILABILITYMANAGER 			|
								sBookReady	        -> DELIVERYMANAGER     			),

        DELIVERYMANAGER=(   	sSubmitReceipt?		-> 	DELIVERYMANAGER				|
								sCourierStart?		->	DELIVERYMANAGER				|
								sReceiptDelivered?	->	DELIVERYMANAGER				|
								sSendElecRecept?	->	DELIVERYMANAGER				|
								sSendPrintReceipt?	->	DELIVERYMANAGER				|
								sWaitBook?	        ->  AVAILABILITYMANAGER 		|
                            	sBookDelivered	    ->  ORDERCLOSED					),

        PAYMENTMANAGER=(    	cMoneyOrder?		->	PAYMENTMANAGER				|
								cSendMoney?			->	PAYMENTMANAGER				|
								sReceivedMoney?		->	PAYMENTMANAGER				|
								sHasCCNNumber?		->	PAYMENTMANAGER				|
								sChargeCreditCard?	->	PAYMENTMANAGER				|
								sHasCCAAuth?		->	PAYMENTMANAGER				|
								sReceiptPrinted?	->	PAYMENTMANAGER				|
								cLeft 				->	ENDSTATE					|
								cBookOrdered?		->	DELIVERYMANAGER				),

        ORDERCLOSED=(   		orderClosed  		->  ORDERCLOSED					),

        ENDSTATE=(   			end     			-> 	ENDSTATE					).


// refinement of the book seller desing
D2=		QUOTEMANAGER,
        QUOTEMANAGER=(  		cRequestQuote?      ->  QUOTEMANAGER        		|
                        		sProvideQuote?      ->  QUOTEMANAGER        		|
                       			cGetBookAvail      -> 	Q1 						    |
                        		cLeft   			->  ENDSTATE 					|
                        		cOrder?     			->  PAYMENTMANAGER      		),

		Q1=(					sBookNotAvailable		->	Q2						|
								sRetBookAvail		->	QUOTEMANAGER				),
		
		Q2=(					sPlaceOrder			->	Q3							),

		Q3=(					sRetBookAvail		->	QUOTEMANAGER				),

		Q4=(					sProvidePrice		->	Q5							),

		Q5=(					cBookOrdered		->	Q6							),

		Q6=(					sBookReady			->  DELIVERYMANAGER				),

        DELIVERYMANAGER=(   	sSubmitReceipt?		-> 	DELIVERYMANAGER				|
								sCourierStart?		->	DELIVERYMANAGER				|
								sWaitBook	        ->  Q4 							|
                            	sBookDelivered	    ->  ORDERCLOSED					),

        PAYMENTMANAGER=(    	cMoneyOrder?		->	PAYMENTMANAGER				|
								cSendMoney?			->	PAYMENTMANAGER				|
								sReceivedMoney?		->	PAYMENTMANAGER				|
								sHasCCNNumber?		->	PAYMENTMANAGER				|
								sChargeCreditCard?	->	PAYMENTMANAGER				|
								sHasCCAAuth?		->	PAYMENTMANAGER				|
								sReceiptPrinted?	->	PAYMENTMANAGER				|
								sReceiptDelivered?	->	PAYMENTMANAGER				|
								sSendElecRecept?	->	PAYMENTMANAGER				|
								sSendPrintReceipt?	->	PAYMENTMANAGER				|
								cLeft 				->	ENDSTATE					|
								cBookOrdered		->	DELIVERYMANAGER				),

        ORDERCLOSED=(   		orderClosed  		->  ORDERCLOSED					),

        ENDSTATE=(   			end     			-> 	ENDSTATE					).


// refinement of the book seller desing
D3=		QUOTEMANAGER,
        QUOTEMANAGER=(  		cRequestQuote?      ->  QUOTEMANAGER        		|
                        		sProvideQuote?      ->  QUOTEMANAGER        		|
                       			cGetBookAvail      -> 	Q1 						    |
                        		cLeft   			->  ENDSTATE 					|
                        		cOrder?     			->  PAYMENTMANAGER      		),

		Q1=(					sBookNotAvailable		->	Q2						|
								sRetBookAvail		->	QUOTEMANAGER				),
		
		Q2=(					sPlaceOrder			->	Q3							),

		Q3=(					sRetBookAvail		->	QUOTEMANAGER				),

		Q4=(					sProvidePrice		->	Q5							),

		Q5=(					cBookOrdered		->	Q6							),

		Q6=(					sBookReady			->  Q8							),

		Q7=(					sWaitBook	        ->  Q4 							),

		Q8=(					sSendPrintReceipt	->	Q9							|
								sSendElecRecept		->	Q9							),

		Q9=(					sSubmitReceipt		->	Q10							),

		Q10=(					sCourierStart		->	Q11							),

		Q11=(					sBookDelivered		->	ORDERCLOSED					),

        PAYMENTMANAGER=(    	cMoneyOrder?		->	PAYMENTMANAGER				|
								cSendMoney?			->	PAYMENTMANAGER				|
								sReceivedMoney?		->	PAYMENTMANAGER				|
								sHasCCNNumber?		->	PAYMENTMANAGER				|
								sChargeCreditCard?	->	PAYMENTMANAGER				|
								sHasCCAAuth?		->	PAYMENTMANAGER				|
								sReceiptPrinted?	->	PAYMENTMANAGER				|
								sReceiptDelivered?	->	PAYMENTMANAGER				|
								sSendElecRecept?	->	PAYMENTMANAGER				|
								sSendPrintReceipt?	->	PAYMENTMANAGER				|
								cLeft 				->	ENDSTATE					|
								cBookOrdered		->	Q7				),

        ORDERCLOSED=(   		orderClosed  		->  ORDERCLOSED					),

        ENDSTATE=(   			end     			-> 	ENDSTATE					).

|| D1_PROC=(D1).

|| D2_PROC=(D2).

|| D3_PROC=(D3).

fluent F_USER_PERFORMS_ORDER=<cOrder, Actions\{cOrder}> 
fluent F_BOOK_DELIVERED=<sBookDelivered, Actions\{sBookDelivered}> 


fluent F_C_REQ_QUOTE=<cRequestQuote, Actions\{cRequestQuote}>
fluent F_S_PROV_QUOTE=<sProvideQuote, Actions\{sProvideQuote}>
fluent F_C_ORDER_BOOK=<cBookOrdered, Actions\{cBookOrdered}>
fluent F_SUBMIT_RECEIPT=<sSubmitReceipt, Actions\{sSubmitReceipt}>

fluent F_RECEIPT_RECEIVED_TO_CLIENT=<sSubmitReceipt, Actions\{sSubmitReceipt}>
fluent F_SYSTEM_PROVIDES_QUOTE=<sProvideQuote, Actions\{sProvideQuote}>
fluent F_SYSTEM_PROVIDES_PRICE=<sProvidePrice, Actions\{sProvidePrice}>

fluent F_WH_AVAIL_BOOK=<sWaitBook, sBookReady>
fluent F_WH_ORD_BOOK=<sPlaceOrder, Actions\{sPlaceOrder}>

fluent F_WH_BOOK_NAV=<sBookNotAvailable, Actions\{sBookNotAvailable}>
fluent F_WH_BOOK_AVAL_MSG=<sRetBookAvail, Actions\{sRetBookAvail}>


// G2: if requested the system provides the quote OK
assert G2=([](F_C_REQ_QUOTE-><>F_S_PROV_QUOTE))


// G3: if the WH orders a book, it is finally delivered to the WH OK
assert G3=([](F_WH_ORD_BOOK->(<>F_WH_AVAIL_BOOK)))
 

// G4: if a book is not available at the WH, it is ordered OK
assert G4=([](F_WH_BOOK_NAV->(<>F_WH_ORD_BOOK)))



// G5: after a book is ordered it is delivered at the WH OK
assert G5=([](F_WH_ORD_BOOK->(<>F_WH_BOOK_AVAL_MSG)))

// G6: The book is finally delivered to the customer. OK
assert G6=([]((<>F_ORDER_CLOSED)->(F_C_ORDER_BOOK->(<>F_BOOK_DELIVERED))))

// G7: if request the receipt is placed in the shipment NO
assert G7=([]((<>F_ORDER_CLOSED)->(F_C_ORDER_BOOK->(<>F_SUBMIT_RECEIPT))))


fluent F_USER_PAYED=<sReceivedMoney, Actions\{sReceivedMoney}>
// G8: the payment of the customer is finally received
assert G8=([](<>F_ORDER_CLOSED->(<>F_USER_PAYED)))

// G9: the money are charged over the CC
assert G9=([](<>F_ORDER_CLOSED->(<>F_MONEY_CHARGED_ON_CC)))

// G10: the payment of the customer is finally received
assert G10=([](<>F_ORDER_CLOSED->(<>F_USER_PAYED)))


fluent F_ORDER_CLOSED=<orderClosed, Actions\{orderClosed}> 
fluent F_SENT_ELECTRONIC_RECEIPT=<sSendElecRecept, Actions\{sSendElecRecept}>
fluent F_SENT_PHYSICAL_RECEIPT=<sSendPrintReceipt, Actions\{sSendPrintReceipt}>
// G11: a physical or electronic receipt is sent
assert G11=(<>F_ORDER_CLOSED->(<>(F_SENT_ELECTRONIC_RECEIPT||F_SENT_PHYSICAL_RECEIPT)))

// G12: the physical receipt is finally received
assert G12=(<>F_ORDER_CLOSED->(<>F_RECEIPT_RECEIVED_TO_CLIENT))

// G13: the receipt is received
assert G13=(<>F_ORDER_CLOSED->(<>F_RECEIPT_RECEIVED_TO_CLIENT))

// G18: the supplier provides the price before the quotes
assert G18=([](!((!F_SYSTEM_PROVIDES_QUOTE)U(F_SYSTEM_PROVIDES_PRICE))))

// G24: charge CC can be done only before delivering to courier
assert G24=([]((<>F_MONEY_CHARGED_ON_CC)->((!F_BOOK_DELIVERED)U(F_MONEY_CHARGED_ON_CC))))

fluent F_MONEY_CHARGED_ON_CC=<sChargeCreditCard, Actions\{sChargeCreditCard}>
fluent F_COURIER_START=<sCourierStart,Actions\{sCourierStart}>
// G25: deliver to courier after get CC authorization
assert G25=([]((<>F_MONEY_CHARGED_ON_CC)->((!F_COURIER_START)U(F_MONEY_CHARGED_ON_CC))))

// G26: The receipt is sent after the payment
assert G26=(<>(F_RECEIPT_RECEIVED_TO_CLIENT)->(!((!F_MONEY_CHARGED_ON_CC)U(F_RECEIPT_RECEIVED_TO_CLIENT))))
